name: Reusable Function App Deployment

on:
  workflow_call:
    inputs:
      function-app-name:
        required: true
        type: string
      resource-group:
        required: true
        type: string
      environment:
        required: true
        type: string
      slot-name:
        required: true
        type: string
      swap-to-prod:
        required: false
        type: string
        default: "false"
      swap-only:
        required: false
        type: string
        default: "false"
      working-directory:
        required: true
        type: string
      node-version:
        required: true
        type: string

    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  # -----------------------------
  # 1️⃣ VALIDATE & BUILD
  # -----------------------------
  validate_and_build:
    name: Validate & Build
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      artifact-name: functionapp-artifact
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Dependencies
        run: npm install --production
        working-directory: ${{ inputs.working-directory }}

      - name: Run Lint
        run: npm run lint
        working-directory: ${{ inputs.working-directory }}

      - name: Run Tests
        run: npm test
        working-directory: ${{ inputs.working-directory }}

      - name: Run Build
        run: npm run build
        working-directory: ${{ inputs.working-directory }}

      - name: Zip Function App
        run: |
          cd ${{ inputs.working-directory }}
          zip -r ../functionapp.zip .   # ✅ Dot ensures correct root structure

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: functionapp-artifact
          path: ../functionapp.zip

  # -----------------------------
  # 2️⃣ APPROVE BEFORE SLOT DEPLOY
  # -----------------------------
  approve_before_slot_deploy:
    name: Await Approval for Slot Deployment
    needs: validate_and_build
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: | 
          echo "⏳ Awaiting approval for ${{ inputs.function-app-name }} to deploy to slot: ${{ inputs.slot-name }}"

  # -----------------------------
  # 3️⃣ DEPLOY FUNCTION APP TO SLOT
  # -----------------------------
  deploy_to_slot:
    name: Deploy to Function App Slot
    needs: approve_before_slot_deploy
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: functionapp-artifact
          path: ./deploy

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Slot Exists
        run: |
          if ! az functionapp deployment slot show \
              --name ${{ inputs.function-app-name }} \
              --resource-group ${{ inputs.resource-group }} \
              --slot ${{ inputs.slot-name }} >/dev/null 2>&1; then
            echo "Slot '${{ inputs.slot-name }}' not found. Creating..."
            az functionapp deployment slot create \
              --name ${{ inputs.function-app-name }} \
              --resource-group ${{ inputs.resource-group }} \
              --slot ${{ inputs.slot-name }}
          else
            echo "Slot '${{ inputs.slot-name }}' already exists. Skipping creation."
          fi

      - name: Deploy Function App
        run: |
          echo "Deploying function app to slot '${{ inputs.slot-name }}'..."
          az functionapp deployment source config-zip \
            --src ./deploy/functionapp.zip \
            --name ${{ inputs.function-app-name }} \
            --resource-group ${{ inputs.resource-group }} \
            --slot ${{ inputs.slot-name }}

  # -----------------------------
  # 4️⃣ APPROVE BEFORE SWAP
  # -----------------------------
  approve_before_swap:
    name: Await Approval for Swap to Production
    needs: deploy_to_slot
    if: ${{ inputs.swap-only != 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: | 
          echo "⏳ Awaiting approval to swap ${{ inputs.slot-name }} slot to Production..."

  # -----------------------------
  # 5️⃣ SWAP SLOT TO PROD
  # -----------------------------
  swap_slot:
    name: Swap Slot to Production
    needs: approve_before_swap
    if: ${{ inputs.swap-only != 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap Slots
        run: |
          echo "Swapping slot '${{ inputs.slot-name }}' to Production..."
          az functionapp deployment slot swap \
            --resource-group ${{ inputs.resource-group }} \
            --name ${{ inputs.function-app-name }} \
            --slot ${{ inputs.slot-name }} \
            --target-slot Production
          echo "✅ Swap successful!"

  # -----------------------------
  # 6️⃣ APPROVE & SWAP ONLY
  # -----------------------------
  approve_swap_only:
    name: Approve Swap Only
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: echo "⏳ Awaiting approval to swap ONLY slot '${{ inputs.slot-name }}' to Production..."

  swap_only:
    name: Swap Only Slot
    needs: approve_swap_only
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap Slots
        run: |
          echo "Swapping slot '${{ inputs.slot-name }}' to Production..."
          az functionapp deployment slot swap \
            --resource-group ${{ inputs.resource-group }} \
            --name ${{ inputs.function-app-name }} \
            --slot ${{ inputs.slot-name }} \
            --target-slot Production
          echo "✅ Swap successful!"
