name: Reusable Function App Deployment

on:
  workflow_call:
    inputs:
      function-app-name:
        required: true
        type: string
      resource-group:
        required: true
        type: string
      environment:
        required: true
        type: string
      slot-name:
        required: false
        type: string
        default: ""
      swap-to-prod:
        required: false
        type: string
        default: "false"
      swap-only:
        required: false
        type: string
        default: "false"
      working-directory:
        required: true
        type: string
      package-path:
        required: true
        type: string
      node-version:
        required: true
        type: string

jobs:
  # ------------------- VALIDATE & BUILD -------------------
  validate:
    name: Validate & Build
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - run: npm install
        working-directory: ${{ inputs.working-directory }}
      - run: npm run lint
        working-directory: ${{ inputs.working-directory }}
      - run: npm test
        working-directory: ${{ inputs.working-directory }}
      - run: npm run build
        working-directory: ${{ inputs.working-directory }}

  # ------------------- APPROVAL BEFORE SLOT DEPLOY -------------------
  approve_before_slot_deploy:
    name: Await Approval for Slot Deployment
    needs: validate
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: |
          SLOT="${{ inputs.slot-name }}"
          if [ -z "$SLOT" ]; then SLOT="Production"; fi
          echo "⏳ Awaiting approval for ${{ inputs.function-app-name }} to deploy to slot: $SLOT"

  # ------------------- DEPLOY TO SLOT -------------------
  deploy:
    name: Deploy to Function App Slot
    needs: approve_before_slot_deploy
    if: ${{ inputs.swap-only != 'true' && inputs.slot-name != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Azure Function App (Custom Slot)
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ inputs.function-app-name }}
          slot-name: ${{ inputs.slot-name }}
          package: ${{ inputs.package-path }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
      - run: |
          echo "✅ Deployed ${{ inputs.function-app-name }} to slot: ${{ inputs.slot-name }}"

  # ------------------- APPROVAL AFTER DEPLOY FOR SWAP -------------------
  approve_after_deploy:
    name: Await Approval for Swap to Production (after deploy)
    needs: deploy
    if: ${{ inputs.swap-to-prod == 'true' && inputs.swap-only != 'true' && inputs.slot-name != '' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: |
          echo "⏳ Awaiting approval to swap ${{ inputs.slot-name }} slot to Production for ${{ inputs.function-app-name }}"

  # ------------------- SWAP AFTER DEPLOY -------------------
  swap_after_deploy:
    name: Swap Slot to Production (after deploy)
    needs: approve_after_deploy
    if: ${{ inputs.swap-to-prod == 'true' && inputs.swap-only != 'true' && inputs.slot-name != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Decode publish profile credentials
        run: |
          echo "${{ secrets.AZURE_PUBLISH_PROFILE }}" > pubprofile.xml
          USERNAME=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@userName)" pubprofile.xml)
          PASSWORD=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@userPWD)" pubprofile.xml)
          echo "USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "PASSWORD=$PASSWORD" >> $GITHUB_ENV
      - name: Swap Slot using Kudu API
        run: |
          APP_NAME=${{ inputs.function-app-name }}
          SLOT=${{ inputs.slot-name }}
          echo "Swapping slot '$SLOT' to Production for $APP_NAME..."
          curl -X POST \
            -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/json" \
            -d "{\"targetSlot\":\"Production\"}" \
            https://$APP_NAME-$SLOT.scm.azurewebsites.net/api/slotswap
          echo "✅ Slot '$SLOT' swapped to Production successfully!"

  # ------------------- APPROVAL FOR SWAP ONLY -------------------
  approve_swap_only:
    name: Approve Swap Only
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' && inputs.slot-name != '' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: |
          echo "⏳ Awaiting approval to swap ${{ inputs.slot-name }} slot to Production for ${{ inputs.function-app-name }}"

  # ------------------- SWAP ONLY -------------------
  swap_only:
    name: Swap Slot to Production (swap-only)
    needs: approve_swap_only
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' && inputs.slot-name != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Decode publish profile credentials
        run: |
          echo "${{ secrets.AZURE_PUBLISH_PROFILE }}" > pubprofile.xml
          USERNAME=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@userName)" pubprofile.xml)
          PASSWORD=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@userPWD)" pubprofile.xml)
          echo "USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "PASSWORD=$PASSWORD" >> $GITHUB_ENV
      - name: Swap Slot using Kudu API
        run: |
          APP_NAME=${{ inputs.function-app-name }}
          SLOT=${{ inputs.slot-name }}
          echo "Swapping slot '$SLOT' to Production for $APP_NAME..."
          curl -X POST \
            -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/json" \
            -d "{\"targetSlot\":\"Production\"}" \
            https://$APP_NAME-$SLOT.scm.azurewebsites.net/api/slotswap
          echo "✅ Slot '$SLOT' swapped to Production successfully!"
