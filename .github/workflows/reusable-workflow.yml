name: Reusable Function App Deployment

on:
  workflow_call:
    inputs:
      function-app-name:
        required: true
        type: string
      resource-group:
        required: true
        type: string
      environment:
        required: true
        type: string
      slot-name:
        required: true   # Always require a slot now
        type: string
      swap-to-prod:
        required: false
        type: string
        default: "false"
      swap-only:
        required: false
        type: string
        default: "false"
      working-directory:
        required: true
        type: string
      package-path:
        required: true
        type: string
      node-version:
        required: true
        type: string

jobs:
  # 1Ô∏è‚É£ VALIDATE & BUILD
  validate:
    name: Validate & Build
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - run: npm install
        working-directory: ${{ inputs.working-directory }}
      - run: npm run lint
        working-directory: ${{ inputs.working-directory }}
      - run: npm test
        working-directory: ${{ inputs.working-directory }}
      - run: npm run build
        working-directory: ${{ inputs.working-directory }}

  # 2Ô∏è‚É£ APPROVAL BEFORE SLOT DEPLOY
  approve_before_slot_deploy:
    name: Await Approval for Slot Deployment
    needs: validate
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: |
          echo "‚è≥ Awaiting approval to deploy '${{ inputs.function-app-name }}' to slot '${{ inputs.slot-name }}'"

  # 3Ô∏è‚É£ DEPLOY TO CUSTOM SLOT
  deploy:
    name: Deploy to Function App Slot
    needs: approve_before_slot_deploy
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Function App to Slot
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ inputs.function-app-name }}
          slot-name: ${{ inputs.slot-name }}
          package: ${{ inputs.package-path }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}

  # 4Ô∏è‚É£ APPROVAL BEFORE SWAP (AFTER DEPLOY)
  approve_before_swap:
    name: Await Approval for Swap to Production
    needs: deploy
    if: ${{ inputs.swap-only != 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: echo "‚è≥ Awaiting approval to swap slot '${{ inputs.slot-name }}' to Production"

  # 5Ô∏è‚É£ SWAP SLOT VIA CLI
  swap:
    name: Swap Slot to Production
    needs: approve_before_swap
    if: ${{ inputs.swap-only != 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Swap Slots
        run: |
          echo "üîÑ Swapping slot '${{ inputs.slot-name }}' to Production..."
          az functionapp deployment slot swap \
            --resource-group ${{ inputs.resource-group }} \
            --name ${{ inputs.function-app-name }} \
            --slot ${{ inputs.slot-name }} \
            --target-slot Production
          echo "‚úÖ Swap successful!"

  # 6Ô∏è‚É£ APPROVE + SWAP ONLY (NO DEPLOY)
  approve_before_swap_only:
    name: Approve Swap Only
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: echo "‚è≥ Awaiting approval to swap ONLY slot '${{ inputs.slot-name }}' to Production"

  # 7Ô∏è‚É£ SWAP ONLY JOB
  swap_only:
    name: Swap Slot Only
    needs: approve_before_swap_only
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Swap Slots
        run: |
          echo "üîÑ Swapping slot '${{ inputs.slot-name }}' to Production..."
          az functionapp deployment slot swap \
            --resource-group ${{ inputs.resource-group }} \
            --name ${{ inputs.function-app-name }} \
            --slot ${{ inputs.slot-name }} \
            --target-slot Production
          echo "‚úÖ Swap successful!"
