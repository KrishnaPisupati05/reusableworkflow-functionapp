name: Reusable Function App Deployment

on:
  workflow_call:
    inputs:
      function-app-name:
        required: true
        type: string
      resource-group:
        required: true
        type: string
      slot-name:
        required: true
        type: string
      swap-to-prod:
        required: true
        type: string  # "true"/"false"
      swap-only:
        required: true
        type: string
      environment:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      node-version:
        required: true
        type: string

jobs:
  validate_and_build:
    name: "Validate, Test and Build"
    if: ${{ inputs.swap-only != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Dependencies
        run: npm install
        working-directory: ${{ inputs.working-directory }}

      - name: Run Tests
        run: npm test
        working-directory: ${{ inputs.working-directory }}

      - name: Run Build
        run: npm run build
        working-directory: ${{ inputs.working-directory }}

      - name: Run Lint
        run: npm run lint
        working-directory: ${{ inputs.working-directory }}

  approve_staging_deployment:
    name: "Approve Staging/Test Deployment"
    if: ${{ inputs.swap-only != 'true' }}
    needs: validate_and_build
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Await Approval for Staging Deployment
        run: echo "Approved for deployment to staging/test"

  deploy_to_staging:
    name: "Deploy to Staging/Test"
    if: ${{ inputs.swap-only != 'true' }}
    needs: approve_staging_deployment
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Slot Exists
        run: |
          if ! az functionapp deployment slot list \
              --name ${{ inputs.function-app-name }} \
              --resource-group ${{ inputs.resource-group }} \
              --query "[?name=='${{ inputs.slot-name }}']" -o tsv | grep -q ${{ inputs.slot-name }}; then
            echo "Slot ${{ inputs.slot-name }} does not exist. Creating..."
            az functionapp deployment slot create \
              --name ${{ inputs.function-app-name }} \
              --resource-group ${{ inputs.resource-group }} \
              --slot ${{ inputs.slot-name }}
          else
            echo "Slot ${{ inputs.slot-name }} already exists."
          fi

      - name: Deploy Function App to Slot
        run: |
          az functionapp deployment source config-zip \
            --name ${{ inputs.function-app-name }} \
            --resource-group ${{ inputs.resource-group }} \
            --slot ${{ inputs.slot-name }} \
            --src ${{ inputs.working-directory }}

  approve_staging_to_production:
    name: "Approve Staging to Production Swap"
    if: ${{ inputs.swap-to-prod == 'true' && inputs.swap-only != 'true' }}
    needs: deploy_to_staging
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Await Approval to Swap Staging to Production
        run: echo "Approved to swap staging slot to production"

  swap_staging_to_production:
    name: "Swap Staging Slot to Production"
    if: ${{ inputs.swap-to-prod == 'true' }}
    needs: approve_staging_to_production
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap Slot to Production
        run: |
          az functionapp deployment slot swap \
            --name ${{ inputs.function-app-name }} \
            --resource-group ${{ inputs.resource-group }} \
            --slot ${{ inputs.slot-name }} \
            --target-slot Production

  approve_swap_only_to_production:
    name: "Approve Swap Only to Production"
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Await Approval for Swap Only
        run: echo "Approved to swap only to production"

  swap_only_to_production:
    name: "Swap Only Slot to Production"
    if: ${{ inputs.swap-only == 'true' && inputs.swap-to-prod == 'true' }}
    needs: approve_swap_only_to_production
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap Slot to Production
        run: |
          az functionapp deployment slot swap \
            --name ${{ inputs.function-app-name }} \
            --resource-group ${{ inputs.resource-group }} \
            --slot ${{ inputs.slot-name }} \
            --target-slot Production
